# AWS Database Migration Workshop
# Last Updated on May 20, 2021 by hoomanh@

AWSTemplateFormatVersion: '2010-09-09'
Description: CloudFormation Template for AWS Database Migration Workshop.

Mappings:
  RegionMap: # 20 Regions
    us-east-1: # Virginia
      "REDISEC2AMI" : "ami-0d894ea5521c64557"
    us-east-2: # Ohio
      "REDISEC2AMI" : "ami-082a25bc38620fc4d"
    us-west-2: # Oregon
      "REDISEC2AMI" : "ami-05037ab6f618ed336"
    ap-south-1: # Mumbai
      "REDISEC2AMI" : "ami-0eefc21aa52001198"
    ap-northeast-2: # Seoul
      "REDISEC2AMI" : "ami-0967b7ff9a7ba331e"
    ap-southeast-1: # Singapore
      "REDISEC2AMI" : "ami-052d3e5a59fc4a877"
    ap-southeast-2: # Sydney
      "REDISEC2AMI" : "ami-097cbef0451a30da5"
    ap-northeast-1: # Tokyo
      "REDISEC2AMI" : "ami-0ce04ab8bcd5de2e9"
    eu-central-1: # Frankfurt
      "REDISEC2AMI" : "ami-09304ee2fe70b3aad"
    eu-west-1: # Ireland
      "REDISEC2AMI" : "ami-03b7776ede7f47475"
    eu-west-2: # London
      "REDISEC2AMI" : "ami-0c2b997e5c91153e0"
    eu-west-3: # Paris
      "REDISEC2AMI" : "ami-0176733f200a89b17"
    eu-north-1: # Stockholm [NO AMD]
      "REDISEC2AMI" : "ami-040e6fa2d290e7b9b"
    sa-east-1: # Sao Paulo
      "REDISEC2AMI" : "ami-06d197a564493b29b"

Parameters:
  ClusterName:
    Description: Prefix Name of the Redis Cluster
    Type: String
  HostedZoneName:
    Description: Hosted Zone Name to use.  This with the prefix cluster name is redis cluster name
    Type: String
  HostedZoneId:
    Description: HostedZoneNames can be duplicate so use Zone Id
    Type: String
  ClusterUserName:
    Description: cluster username email address
    Type: String
  ClusterPassword:
    Description: cluster password
    Type: String
  ClusterURL:
    Description: cluster URL
    Type: String
  NumberInstances:
    Description: Number of Redis EC2 instances for this region
    Type: Number
    MinValue: 1
    MaxValue: 3
    Default: 2
  RedisEC2InstType:
    Description: Amazon EC2 Instance Type  m4 and m5.xlarge 4-16 m5 has better network, 2xlarge 8-13,  r4.xlarge 4 30.5, 8 61
    Type: String
    Default: r4.2xlarge
    AllowedValues:
      - r4.xlarge
      - r4.2xlarge
      - r4.4xlarge
      - r4.8xlarge
      - r4.16xlarge
      - m4.xlarge
      - m4.2xlarge
      - m4.4xlarge
      - m4.10xlarge
      - m4.16xlarge
      - c5a.xlarge
      - c5a.2xlarge
      - c5a.4xlarge
      - c5a.8xlarge
      - c5a.16xlarge
      - i3.large
      - i3.xlarge
      - i3.2xlarge
      - i3.4xlarge
      - i3.8xlarge
      - i3.16xlarge
    ConstraintDescription: Must be a valid EC2 instance type.
  RedisDatabasePort:
    Description: Database Port for Redis database
    Type: String
  Subnet1d:
    Description: Subnet1 for the RedisVMs
    Type: String
  Subnet2d:
    Description: Subnet2 for the RedisVMs
    Type: String
  Subnet3d:
    Description: Subnet3 for the RedisVMs
    Type: String
  InstanceSecurityGroup:
    Description: InstanceSecurityGroup for the RedisVMs
    Type: String
  KeyName:
    Description: EC2 instance KeyName
    Type: String
 
  

Conditions:
  Create-One: !Equals [ !Ref NumberInstances, 1 ]
  Create-Two: !Equals [ !Ref NumberInstances, 2 ]
  Create-Three: !Equals [ !Ref NumberInstances, 3 ]
  Do-Two: !Or
    - !Condition Create-Two
    - !Condition Create-Three

Resources:

  RedisIPAddressVM1:
    Type: AWS::EC2::EIP

  RedisIPAssocVM1:
    Type: AWS::EC2::EIPAssociation
    Properties:
      InstanceId: !Ref RedisEC2VM1
      EIP: !Ref RedisIPAddressVM1

  RedisEC2VM1:
    Type:  AWS::EC2::Instance
    DependsOn:
      - RedisIPAddressVM1
    Properties:
      ImageId:
        Fn::FindInMap:
        - RegionMap
        - !Ref AWS::Region
        - REDISEC2AMI
      InstanceType: !Ref RedisEC2InstType
      SubnetId: !Ref Subnet2d
      KeyName: !Ref KeyName
      SecurityGroupIds:
        - Ref: InstanceSecurityGroup
      Tags:
        - Key: 'Name'
          Value: !Join ['',  [!Ref AWS::StackName, 'VM1'] ]
      UserData:
        Fn::Base64:
          !Sub |
             #!/bin/bash -xe
             sudo  bash -l
             yum -y install git wget bind-utils
             /opt/redislabs/bin/rladmin cluster create name ${RedisNSRecord} persistent_path /var/opt/redislabs/persist  ephemeral_path /var/opt/redislabs/tmp  addr $(hostname -i) username ${ClusterUserName} password ${ClusterPassword} external_addr $(dig +short myip.opendns.com @resolver1.opendns.com) register_dns_suffix
             cd /home/ec2-user
             mkdir rlec
             cd rlec
             wget https://s3.amazonaws.com/redis-enterprise-software-downloads/6.2.8/redislabs-6.2.8-53-rhel7-x86_64.tar
             tar xvf redislabs-6.2.8-53-rhel7-x86_64.tar
             ./install.sh -y --allow-same-version
             bash -l
             curl -v -k -u ${ClusterURL} -X POST https://localhost:9443/v1/bdbs -H Content-type:application/json -d '{ "name":"demo-db","port":${RedisDatabasePort},"memory_size":5000000,"type":"redis","replication":false}'

  RedisIPAddressVM2:
    Condition: Do-Two
    Type: AWS::EC2::EIP

  RedisIPAssocVM2:
    Condition: Do-Two
    Type: AWS::EC2::EIPAssociation
    Properties:
      InstanceId: !Ref RedisEC2VM2
      EIP: !Ref RedisIPAddressVM2

  RedisEC2VM2:
    Type:  AWS::EC2::Instance
    Condition: Do-Two
    DependsOn:
      - RedisEC2VM1
      - RedisIPAddressVM2
    Properties:
      ImageId:
        Fn::FindInMap:
        - RegionMap
        - !Ref AWS::Region
        - REDISEC2AMI
      InstanceType: !Ref RedisEC2InstType
      SubnetId: !Ref Subnet3d
      KeyName: !Ref KeyName
      SecurityGroupIds:
        - Ref: InstanceSecurityGroup
      Tags:
        - Key: 'Name'
          Value: !Join ['',  [!Ref AWS::StackName, 'VM2'] ]
      UserData:
        Fn::Base64:
          !Sub |
              #!/bin/bash -xe
              sudo  bash -l
              yum -y install bind-utils git wget
              cd /home/ec2-user
              mkdir rlec
              cd rlec
              wget https://s3.amazonaws.com/redis-enterprise-software-downloads/6.2.8/redislabs-6.2.8-53-rhel7-x86_64.tar
              tar xvf redislabs-6.2.8-53-rhel7-x86_64.tar
              /opt/redislabs/bin/rl_uninstall.sh
              ./install.sh -y --allow-same-version
              sudo  bash -l
              /opt/redislabs/bin/rladmin cluster join nodes ${RedisEC2VM1.PrivateIp} persistent_path /var/opt/redislabs/persist  ephemeral_path /var/opt/redislabs/tmp  addr $(hostname -i) username ${ClusterUserName} password ${ClusterPassword} external_addr $(dig +short myip.opendns.com @resolver1.opendns.com)

  RedisIPAddressVM3:
    Condition: Create-Three
    Type: AWS::EC2::EIP

  RedisIPAssocVM3:
    Condition: Create-Three
    Type: AWS::EC2::EIPAssociation
    Properties:
      InstanceId: !Ref RedisEC2VM3
      EIP: !Ref RedisIPAddressVM3

  RedisEC2VM3:
    Condition: Create-Three
    Type:  AWS::EC2::Instance
    DependsOn:
      - RedisEC2VM1
      - RedisIPAddressVM3
    Properties:
      ImageId:
        Fn::FindInMap:
        - RegionMap
        - !Ref AWS::Region
        - REDISEC2AMI
      InstanceType: !Ref RedisEC2InstType
      SubnetId: !Ref Subnet1d
      KeyName: !Ref KeyName
      SecurityGroupIds:
        - Ref: InstanceSecurityGroup
      Tags:
        - Key: 'Name'
          Value: !Join ['',  [!Ref AWS::StackName, 'VM3'] ]
      UserData:
        Fn::Base64:
          !Sub |
              #!/bin/bash -xe
              sudo  bash -l
              yum -y install bind-utils git wget
              cd /home/ec2-user
              mkdir rlec
              cd rlec
              wget https://s3.amazonaws.com/redis-enterprise-software-downloads/6.2.8/redislabs-6.2.8-53-rhel7-x86_64.tar
              tar xvf redislabs-6.2.8-53-rhel7-x86_64.tar
              /opt/redislabs/bin/rl_uninstall.sh
              ./install.sh -y --allow-same-version
              sudo  bash -l
              /opt/redislabs/bin/rladmin cluster join nodes ${RedisEC2VM1.PrivateIp} persistent_path /var/opt/redislabs/persist  ephemeral_path /var/opt/redislabs/tmp  addr $(hostname -i) username ${ClusterUserName} password ${ClusterPassword} external_addr $(dig +short myip.opendns.com @resolver1.opendns.com)

  RedisARecord1:
    Type: AWS::Route53::RecordSet
    DependsOn:
      - RedisIPAddressVM1
    Properties:
      HostedZoneId: !Ref HostedZoneId
      Comment: DNS name for my instance
      Name: !Join ['',  ['node1.', !Ref ClusterName, ., !Ref HostedZoneName ] ]
      Type: A
      TTL: 900
      ResourceRecords:
        - !Ref RedisIPAddressVM1


  RedisARecord2:
    Condition: Do-Two
    Type: AWS::Route53::RecordSet
    DependsOn:
      - RedisIPAddressVM2
    Properties:
      HostedZoneId: !Ref HostedZoneId
      Comment: DNS name for my instance
      Name: !Join ['',  ['node2.', !Ref ClusterName, ., !Ref HostedZoneName ] ]
      Type: A
      TTL: 900
      ResourceRecords:
        - !Ref RedisIPAddressVM2

  RedisARecord3:
    Condition: Create-Three
    Type: AWS::Route53::RecordSet
    DependsOn:
      - RedisEC2VM3
    Properties:
      HostedZoneId: !Ref HostedZoneId
      Comment: DNS name for my instance
      Name: !Join ['',  ['node3.', !Ref ClusterName, ., !Ref HostedZoneName ] ]
      Type: A
      TTL: 900
      ResourceRecords:
        - !Ref RedisIPAddressVM3

  RedisNSRecord:
    Type: AWS::Route53::RecordSet
    Properties:
      HostedZoneId: !Ref HostedZoneId
      Name: !Join ['', [ !Ref ClusterName, ., !Ref HostedZoneName ] ]
      Type: NS
      TTL: '900'
      ResourceRecords:
        - !Join ['', [ 'node1.', !Ref ClusterName, ., !Ref HostedZoneName ] ]
        - !Join ['', [ 'node2.', !Ref ClusterName, ., !Ref HostedZoneName ] ]
        - !Join ['', [ 'node3.', !Ref ClusterName, ., !Ref HostedZoneName ] ]

Outputs:
  RedisInstancePrivateDNS1:
    Description: 'Private DNS for Redis EC2 instance'
    Value: !GetAtt RedisEC2VM1.PrivateDnsName

  RedisInstancePublicDNS1:
    Description: 'Public DNS for Redis EC2 instance'
    Value: !GetAtt RedisEC2VM1.PublicDnsName

  RedisInstancePrivateIP1:
    Description: 'Private IP for Redis EC2 instance'
    Value: !GetAtt RedisEC2VM1.PrivateIp

  RedisInstancePublicIP1:
    Description: 'Public IP for Redis EC2 instance'
    Value: !GetAtt RedisEC2VM1.PublicIp

  RedisNSRecord:
    Description: 'The NS Record Name for Redis'
    Value: !Ref RedisNSRecord

  RedisARecord1:
    Description: 'The A Record Name for Redis'
    Value: !Ref RedisARecord1

