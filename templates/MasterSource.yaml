# AWS Database Migration Workshop
# Last Updated on May 20, 2021 by hoomanh@

AWSTemplateFormatVersion: '2010-09-09'
Description: CloudFormation Template for AWS Database Migration Workshop.

Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      -
        Label:
          default: "Database Migration Workshop Lab Environment"
        Parameters:
          - LabType
      -
        Label:
          default: "Amazon EC2 Configuration"
        Parameters:
          - EC2ServerInstanceType
          - KeyName
      -
        Label:
          default: "Target Amazon RDS Database Configuration"
        Parameters:
          - RDSInstanceType
      -
        Label:
          default: "Network Configuration"
        Parameters:
          - VpcCIDR

Mappings:
  RegionMap: # 20 Regions
    us-east-1: # Virginia
      "EC2AMI" : "ami-045d48ee4dd4f5210"  # Updated Feb 3, 2020
      "OracleSnapshotId" : "arn:aws:rds:us-east-1:833997227572:snapshot:dms-lab-oracle-source-snapshot01"
      "REDISEC2AMI" : "ami-0d894ea5521c64557"
    us-east-2: # Ohio
      "EC2AMI" : "ami-021e119b2b955586a" # Updated Feb 3, 2020
      "OracleSnapshotId" : "arn:aws:rds:us-east-2:833997227572:snapshot:dms-lab-oracle-source-us-east-2-snapshot01"
      "REDISEC2AMI" : "ami-082a25bc38620fc4d"
    us-west-2: # Oregon
      "EC2AMI" : "ami-04f6666670bad6990" # Updated Feb 3, 2020
      "OracleSnapshotId" : "arn:aws:rds:us-west-2:833997227572:snapshot:dms-lab-oracle-source-us-west-2-snapshot01"
      "REDISEC2AMI" : "ami-05037ab6f618ed336"
    af-south-1: # Cape Town [NO AMD]
      "EC2AMI" : "ami-0c8aa4d034fda72df" # Updated Feb 3, 2020
      "OracleSnapshotId" : "arn:aws:rds:af-south-1:833997227572:snapshot:dms-lab-oracle-source-snapshot01"
    ap-east-1: # Hong Kong [NO AMD]
      "EC2AMI" : "ami-02c2c4016266a7993" # Updated Feb 3, 2020
      "OracleSnapshotId" : "arn:aws:rds:ap-east-1:833997227572:snapshot:dms-lab-oracle-source-snapshot01"
    ap-south-1: # Mumbai
      "EC2AMI" : "ami-01ef7145a99919201" # Updated Feb 3, 2020
      "OracleSnapshotId" : "arn:aws:rds:ap-south-1:833997227572:snapshot:dms-lab-oracle-source-ap-south-1-snapshot01"
      "REDISEC2AMI" : "ami-0eefc21aa52001198"
    ap-northeast-3: # Osaka [NO AMD]
      "EC2AMI" : "ami-0851ca5087badf599" # Updated Feb 3, 2020
      "OracleSnapshotId" : "arn:aws:rds:ap-northeast-3:833997227572:snapshot:dms-lab-oracle-source-snapshot01"
    ap-northeast-2: # Seoul
      "EC2AMI" : "ami-0f84e34359512e516" # Updated Feb 3, 2020
      "OracleSnapshotId" : "arn:aws:rds:ap-northeast-2:833997227572:snapshot:dms-lab-oracle-source-ap-northeast-2-snapshot01"
      "REDISEC2AMI" : "ami-0967b7ff9a7ba331e"
    ap-southeast-1: # Singapore
      "EC2AMI" : "ami-08c6f23674b803e33" # Updated Feb 3, 2020
      "OracleSnapshotId" : "arn:aws:rds:ap-southeast-1:833997227572:snapshot:dms-lab-oracle-source-ap-southeast-1-snapshot01"
      "REDISEC2AMI" : "ami-052d3e5a59fc4a877"
    ap-southeast-2: # Sydney
      "EC2AMI" : "ami-0327c19efba4c1cc7" # Updated Feb 3, 2020
      "OracleSnapshotId" : "arn:aws:rds:ap-southeast-2:833997227572:snapshot:dms-lab-oracle-source-ap-southeast-2-snapshot01"
      "REDISEC2AMI" : "ami-097cbef0451a30da5"
    ap-northeast-1: # Tokyo
      "EC2AMI" : "ami-071fb5f94e15b8af8" # Updated Feb 3, 2020
      "OracleSnapshotId" : "arn:aws:rds:ap-northeast-1:833997227572:snapshot:dms-lab-oracle-source-ap-northeast-1-snapshot01"
      "REDISEC2AMI" : "ami-0ce04ab8bcd5de2e9"
    ca-central-1: # Canada
      "EC2AMI" : "ami-008ec7358d43abf2a" # Updated Feb 3, 2020
      "OracleSnapshotId" : "arn:aws:rds:ca-central-1:833997227572:snapshot:dms-lab-oracle-source-ca-central-1-snapshot01"
    eu-central-1: # Frankfurt
      "EC2AMI" : "ami-009ce26e2fc8621cd" # Updated Feb 3, 2020
      "OracleSnapshotId" : "arn:aws:rds:eu-central-1:833997227572:snapshot:dms-lab-oracle-source-eu-central-1-snapshot01"
      "REDISEC2AMI" : "ami-09304ee2fe70b3aad"
    eu-west-1: # Ireland
      "EC2AMI" : "ami-075c511465e103a00" # Updated Feb 3, 2020
      "OracleSnapshotId" : "arn:aws:rds:eu-west-1:833997227572:snapshot:dms-lab-oracle-source-eu-west-1-snapshot01"
      "REDISEC2AMI" : "ami-03b7776ede7f47475"
    eu-west-2: # London
      "EC2AMI" : "ami-0738996a89d25ae41" # Updated Feb 3, 2020
      "OracleSnapshotId" : "arn:aws:rds:eu-west-2:833997227572:snapshot:dms-lab-oracle-source-snapshot"
      "REDISEC2AMI" : "ami-0c2b997e5c91153e0"
    eu-south-1: # Milan
      "EC2AMI" : "ami-0237a7d686bc096c4" # Updated Feb 3, 2020
      "OracleSnapshotId" : "arn:aws:rds:eu-south-1:833997227572:snapshot:dms-lab-oracle-source-snapshot01"
    eu-west-3: # Paris
      "EC2AMI" : "ami-0a9211e0416c5d9e7" # Updated Feb 3, 2020
      "OracleSnapshotId" : "arn:aws:rds:eu-west-3:833997227572:snapshot:dms-lab-oracle-source-snapshot"
      "REDISEC2AMI" : "ami-0176733f200a89b17"
    eu-north-1: # Stockholm [NO AMD]
      "EC2AMI" : "ami-0974f8de192e11d12" # Updated Feb 3, 2020
      "OracleSnapshotId" : "arn:aws:rds:eu-north-1:833997227572:snapshot:dms-lab-oracle-source-snapshot"
      "REDISEC2AMI" : "ami-040e6fa2d290e7b9b"
    me-south-1: # Bahrain [NO AMD]
      "EC2AMI" : "ami-09162957d5fb4cc4f" # Updated Feb 3, 2020
      "OracleSnapshotId" : "arn:aws:rds:me-south-1:833997227572:snapshot:dms-lab-oracle-source-snapshot01"
    sa-east-1: # Sao Paulo
      "EC2AMI" : "ami-0c6dc49bd206d2bcf" # Updated Feb 3, 2020
      "OracleSnapshotId" : "arn:aws:rds:sa-east-1:833997227572:snapshot:dms-lab-oracle-source-snapshot"
      "REDISEC2AMI" : "ami-06d197a564493b29b"

Parameters:
  RedisDatabasePort:
    Description: Specify database port used for Redis
    Type: String
  ClusterName:
    Description: Prefix Name of the Redis Cluster
    Type: String
  HostedZoneName:
    Description: Hosted Zone Name to use.  This with the prefix cluster name is redis cluster name
    Type: String
  HostedZoneId:
    Description: HostedZoneNames can be duplicate so use Zone Id
    Type: String
  ClusterUserName:
    Description: cluster username email address
    Type: String
  ClusterPassword:
    Description: cluster password
    Type: String
  ClusterURL:
    Description: cluster URL
    Type: String
  LocalIp:
    Description: local IP address used for security group ssh port opening
    Type: String
  S3Bucket:
    Description: S3Bucket for holding redis connector spillage
    Type: String
  NumberInstances:
    Description: Number of Redis EC2 instances for this region
    Type: Number
    MinValue: 1
    MaxValue: 3
    Default: 3
  RedisEC2InstType:
    Description: Amazon EC2 Instance Type  m4 and m5.xlarge 4-16 m5 has better network, 2xlarge 8-13,  r4.xlarge 4 30.5, 8 61
    Type: String
    Default: r4.2xlarge
    AllowedValues:
      - r4.xlarge
      - r4.2xlarge
      - r4.4xlarge
      - r4.8xlarge
      - r4.16xlarge
      - m4.xlarge
      - m4.2xlarge
      - m4.4xlarge
      - m4.10xlarge
      - m4.16xlarge
      - c5a.xlarge
      - c5a.2xlarge
      - c5a.4xlarge
      - c5a.8xlarge
      - c5a.16xlarge
      - i3.large
      - i3.xlarge
      - i3.2xlarge
      - i3.4xlarge
      - i3.8xlarge
      - i3.16xlarge
    ConstraintDescription: Must be a valid EC2 instance type.
  LabType:
    Description: 'Select your source database for the migration'
    Type: String
    AllowedValues:
      - 'MicrosoftSQLServer'
      - 'AmazonAuroraMySQL'
      - 'AmazonAuroraPostgreSQL'
      - 'AmazonRDSMySQL'
      - 'AmazonRDSPostgreSQL'
      - 'Oracle'
    ConstraintDescription: Must select a lab environment from the options.
  KeyName:
    Description: Name of an existing EC2 KeyPair to enable RDP access to the instance
    Type: AWS::EC2::KeyPair::KeyName
    ConstraintDescription: must be the name of an existing EC2 KeyPair.
  VpcCIDR:
    Description: Enter the VPC CIDR range in the form x.x.x.x/16.
    Type: String
    MinLength: 9
    MaxLength: 18
    AllowedPattern: "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})"
    ConstraintDescription: Must be a valid CIDR range in the form x.x.x.x/16.
    Default: 10.20.0.0/16
  EC2ServerInstanceType:
    Description: Amazon EC2 Instance Type
    Type: String
    Default: m5.xlarge
    AllowedValues:
      - m5.large
      - m5.xlarge
      - m5.2xlarge
      - m5.4xlarge
      - m5a.large
      - m5a.xlarge
      - m5a.2xlarge
      - m5a.4xlarge
    ConstraintDescription: Must be a valid EC2 instance type.
  RDSInstanceType:
    Description: Amazon RDS Aurora Instance Type
    Type: String
    Default: db.r5.xlarge
    AllowedValues:
      - db.r5.large
      - db.r5.xlarge
      - db.r5.2xlarge
      - db.r5.4xlarge
    ConstraintDescription: Must be a valid Amazon RDS instance type.

Conditions:
  SQLServer: !Equals [ !Ref LabType, 'MicrosoftSQLServer' ]
  AuroraMySQL:      !Equals [ !Ref LabType, 'AmazonAuroraMySQL' ]
  AuroraPostgreSQL: !Equals [ !Ref LabType, 'AmazonAuroraPostgreSQL' ]
  RDSMySQL:         !Equals [ !Ref LabType, 'AmazonRDSMySQL' ]
  RDSPostgres:      !Equals [ !Ref LabType, 'AmazonRDSPostgreSQL' ]
  Oracle:           !Equals [ !Ref LabType, 'Oracle'] 
  Create-One: !Equals [ !Ref NumberInstances, 1 ]
  Create-Two: !Equals [ !Ref NumberInstances, 2 ]
  Create-Three: !Equals [ !Ref NumberInstances, 3 ]
  Do-Two: !Or
    - !Condition Create-Two
    - !Condition Create-Three

Resources:
  DmsVpc:
    Type: AWS::EC2::VPC
    Properties:
      EnableDnsSupport: 'true'
      EnableDnsHostnames: 'true'
      CidrBlock:
        Ref: VpcCIDR
      Tags:
      - Key: Name
        Value:
          Fn::Join:
          - "-"
          - - Ref: AWS::StackName
            - DmsVpc
  Subnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref DmsVpc
      CidrBlock: !Select [ 0, !Cidr [ !GetAtt DmsVpc.CidrBlock, 3, 8 ]]
      AvailabilityZone: !Select [0, !GetAZs ]
      Tags:
      - Key: Name
        Value:
          Fn::Join:
          - "-"
          - - Ref: AWS::StackName
            - Subnet1
  Subnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref DmsVpc
      CidrBlock: !Select [ 1, !Cidr [ !GetAtt DmsVpc.CidrBlock, 3, 8 ]]
      AvailabilityZone: !Select [1, !GetAZs ]
      Tags:
      - Key: Name
        Value:
          Fn::Join:
          - "-"
          - - Ref: AWS::StackName
            - Subnet2
  Subnet3:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref DmsVpc
      CidrBlock: !Select [ 2, !Cidr [ !GetAtt DmsVpc.CidrBlock, 3, 8 ]]
      AvailabilityZone: !Select [2, !GetAZs ]
      Tags:
      - Key: Name
        Value:
          Fn::Join:
          - "-"
          - - Ref: AWS::StackName
            - Subnet3
  DBSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupDescription: Subnets available for the DMS Lab
      SubnetIds:
      - Ref: Subnet1
      - Ref: Subnet2
      - Ref: Subnet3
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
      - Key: Name
        Value:
          Fn::Join:
          - "-"
          - - Ref: AWS::StackName
            - InternetGateway
  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref DmsVpc
      InternetGatewayId: !Ref InternetGateway
  RouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref DmsVpc
      Tags:
      - Key: Name
        Value:
          Fn::Join:
          - "-"
          - - Ref: AWS::StackName
            - RouteTable
  Route:
    Type: AWS::EC2::Route
    DependsOn: AttachGateway
    Properties:
      RouteTableId: !Ref RouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway
  Subnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref Subnet1
      RouteTableId: !Ref RouteTable
  Subnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref Subnet2
      RouteTableId: !Ref RouteTable
  Subnet3RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref Subnet3
      RouteTableId: !Ref RouteTable
  EC2Instance:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: !Ref EC2ServerInstanceType
      KeyName: !Ref KeyName
      Tags:
      - Key: Name
        Value:
          Fn::Join:
          - "-"
          - - Ref: AWS::StackName
            - EC2Instance
      BlockDeviceMappings:
      - DeviceName: "/dev/sda1"
        Ebs:
          DeleteOnTermination: 'true'
          Iops: '2000'
          VolumeSize: '250'
          VolumeType: io1
      ImageId:
        Fn::FindInMap:
        - RegionMap
        - !Ref AWS::Region
        - EC2AMI
      NetworkInterfaces:
      - AssociatePublicIpAddress: 'true'
        DeleteOnTermination: 'true'
        DeviceIndex: 0
        SubnetId: !Ref Subnet2
        GroupSet:
        - Ref: InstanceSecurityGroup

  InstanceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      Tags:
      - Key: Name
        Value:
          Fn::Join:
          - "-"
          - - Ref: AWS::StackName
            - InstanceSecurityGroup
      GroupDescription: Enable RDP access via port 3389
      VpcId: !Ref DmsVpc
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: '3389'
        ToPort: '3389'
        CidrIp: 0.0.0.0/0
        Description: Allows RDP access to EC2 Instance
      - IpProtocol: tcp
        FromPort: '1521'
        ToPort: '1521'
        CidrIp: !Ref VpcCIDR
        Description: Allows Amazon RDS Oracle Access
      - IpProtocol: tcp
        FromPort: '5432'
        ToPort: '5432'
        CidrIp: !Ref VpcCIDR
        Description: Allows Amazon RDS Aurora (PostgreSQL) Access
      - IpProtocol: tcp
        FromPort: '1433'
        ToPort: '1433'
        CidrIp: !Ref VpcCIDR
        Description: Allows SQL Server Access
      - IpProtocol: tcp
        FromPort: '3306'
        ToPort: '3306'
        CidrIp: !Ref VpcCIDR
        Description: Allows Amazon RDS Aurora (MySQL) Access
      - IpProtocol: "tcp"
        CidrIp: !Join ['', [!Ref LocalIp, "/32"] ]
        FromPort: 22
        ToPort: 22
      - IpProtocol: "tcp"
        CidrIp: "0.0.0.0/0"
        FromPort: 9443
        ToPort: 9443
      - IpProtocol: "tcp"
        CidrIp: "0.0.0.0/0"
        FromPort: 8080
        ToPort: 8080
      - IpProtocol: "tcp"
        CidrIp: "0.0.0.0/0"
        FromPort: 8443
        ToPort: 8443
      - IpProtocol: "tcp"
        CidrIp: "0.0.0.0/0"
        FromPort: 12000
        ToPort: 12000
      - IpProtocol: "udp"
        CidrIp: "0.0.0.0/0"
        FromPort: 5353
        ToPort: 5353
      - IpProtocol: "tcp"
        CidrIp: "0.0.0.0/0"
        FromPort: 5353
        ToPort: 5353
      - IpProtocol: "udp"
        CidrIp: "0.0.0.0/0"
        FromPort: 53
        ToPort: 53
      - IpProtocol: "tcp"
        CidrIp: "0.0.0.0/0"
        FromPort: 53
        ToPort: 53

  InstanceGroupInternalIngress:
    Type: 'AWS::EC2::SecurityGroupIngress'
    Properties:
      IpProtocol: -1
      SourceSecurityGroupId: !GetAtt InstanceSecurityGroup.GroupId
      GroupId: !GetAtt InstanceSecurityGroup.GroupId

  SourceOracleDB:
    Condition: Oracle
    Type: AWS::RDS::DBInstance
    DeletionPolicy: Delete
    Properties:
      Tags:
      - Key: Name
        Value:
          Fn::Join:
          - "-"
          - - Ref: AWS::StackName
            - SourceOracleDB
      DBName: 'OracleDB'
      AllocatedStorage: '100'
      StorageType: gp2
      MasterUsername: 'dbmaster'
      MasterUserPassword: 'dbmaster123'
      DBInstanceClass: !Ref RDSInstanceType
      Engine: oracle-ee
      EngineVersion: '12.1.0.2.v6'
      LicenseModel: bring-your-own-license
      PubliclyAccessible: false
      AvailabilityZone:
        Fn::GetAtt:
          - Subnet2
          - AvailabilityZone
      MultiAZ: false
      DBSubnetGroupName:
        Ref: DBSubnetGroup
      VPCSecurityGroups:
        - Fn::GetAtt:
          - OracleSourceSecurityGroup
          - GroupId
      DBSnapshotIdentifier:
        Fn::FindInMap:
          - RegionMap
          - !Ref AWS::Region
          - OracleSnapshotId
      DBInstanceIdentifier:
        Fn::Join:
        - "-"
        - - Ref: AWS::StackName
          - SourceOracleDB
  OracleSourceSecurityGroup:
    Condition: Oracle
    Type: AWS::EC2::SecurityGroup
    Properties:
      Tags:
      - Key: Name
        Value:
          Fn::Join:
          - "-"
          - - Ref: AWS::StackName
            - OracleSourceSecurityGroup
      GroupDescription: Security group for Source Oracle Instance.
      VpcId: !Ref DmsVpc
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: '1521'
        ToPort: '1521'
        CidrIp: !Ref VpcCIDR
        Description: Allows Amazon RDS Oracle Access
  RDSSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      Tags:
      - Key: Name
        Value:
          Fn::Join:
          - "-"
          - - Ref: AWS::StackName
            - RDSSecurityGroup
      VpcId: !Ref DmsVpc
      GroupDescription: Amazon Aurora RDS Security Group.
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: '5432'
        ToPort: '5432'
        CidrIp: !Ref VpcCIDR
        Description: Allows Amazon RDS Aurora (PostgreSQL) Access
      - IpProtocol: tcp
        FromPort: '3306'
        ToPort: '3306'
        CidrIp: !Ref VpcCIDR
        Description: Allows Amazon RDS Aurora (MySQL) Access
      - IpProtocol: tcp
        FromPort: '1433'
        ToPort: '1433'
        CidrIp: !Ref VpcCIDR
        Description: Allows Microsoft SQL Server Access
      - IpProtocol: tcp
        FromPort: '1521'
        ToPort: '1521'
        CidrIp: !Ref VpcCIDR
        Description: Allows Oracle Access
  AuroraPostgresqlCluster:
    Condition: AuroraPostgreSQL
    Type: AWS::RDS::DBCluster
    DeletionPolicy: Delete
    Properties:
      Tags:
      - Key: Name
        Value:
          Fn::Join:
          - "-"
          - - Ref: AWS::StackName
            - AuroraPostgresqlCluster
      DBSubnetGroupName:
        Ref: DBSubnetGroup
      VpcSecurityGroupIds:
      - Fn::GetAtt:
        - RDSSecurityGroup
        - GroupId
      DatabaseName: 'AuroraDB'
      Engine: aurora-postgresql
      EngineVersion: '12.4'
      DBClusterParameterGroupName: default.aurora-postgresql12
      MasterUsername: 'dbmaster'
      MasterUserPassword: 'dbmaster123'
      Port: '5432'
      BackupRetentionPeriod: '1'
    DependsOn: RDSSecurityGroup
  AuroraPostgresqlInstance:
    Condition: AuroraPostgreSQL
    Type: AWS::RDS::DBInstance
    DeletionPolicy: Delete
    Properties:
      Tags:
      - Key: Name
        Value:
          Fn::Join:
          - "-"
          - - Ref: AWS::StackName
            - AuroraPostgresqlInstance
      DBClusterIdentifier:
        Ref: AuroraPostgresqlCluster
      DBInstanceIdentifier:
        Fn::Join:
        - "-"
        - - Ref: AWS::StackName
          - AuroraPostgreSQLInstance
      Engine: aurora-postgresql
      EngineVersion: '12.4'
      DBParameterGroupName: default.aurora-postgresql12
      DBClusterIdentifier:
        Ref: AuroraPostgresqlCluster
      DBSubnetGroupName:
        Ref: DBSubnetGroup
      AutoMinorVersionUpgrade: 'true'
      CopyTagsToSnapshot: 'true'
      DBInstanceClass: !Ref RDSInstanceType
      PubliclyAccessible: 'false'
  AuroraMySQLCluster:
    Condition: AuroraMySQL
    Type: AWS::RDS::DBCluster
    DeletionPolicy: Delete
    Properties:
      Tags:
      - Key: Name
        Value:
          Fn::Join:
          - "-"
          - - Ref: AWS::StackName
            - AuroraMySQLCluster
      DBSubnetGroupName:
        Ref: DBSubnetGroup
      VpcSecurityGroupIds:
      - Fn::GetAtt:
        - RDSSecurityGroup
        - GroupId
      DatabaseName: AuroraMySQL
      Engine: aurora-mysql
      EngineVersion: 5.7.mysql_aurora.2.07.4
      MasterUsername: awssct
      MasterUserPassword: Password1
    DependsOn: RDSSecurityGroup
  AuroraMySQLInstance:
    Condition: AuroraMySQL
    Type: AWS::RDS::DBInstance
    DeletionPolicy: Delete
    Properties:
      Tags:
      - Key: Name
        Value:
          Fn::Join:
          - "-"
          - - Ref: AWS::StackName
            - AuroraMySQLInstance
      DBClusterIdentifier:
        Ref: AuroraMySQLCluster
      DBInstanceIdentifier:
        Fn::Join:
        - "-"
        - - Ref: AWS::StackName
          - AuroraMySQLInstance
      DBSubnetGroupName:
        Ref: DBSubnetGroup
      DBInstanceClass: !Ref RDSInstanceType
      Engine: aurora-mysql
      EngineVersion: 5.7.mysql_aurora.2.07.4
      LicenseModel: general-public-license
      PubliclyAccessible: 'false'
  SourceSQLServer:
    Condition: SQLServer
    Type: AWS::RDS::DBInstance
    DeletionPolicy: Delete
    Properties:
      Tags:
      - Key: Name
        Value:
          Fn::Join:
          - "-"
          - - Ref: AWS::StackName
            - AuroraMySQLInstance
      DBSubnetGroupName:
        Ref: DBSubnetGroup
      VPCSecurityGroups:
      - Fn::GetAtt:
        - RDSSecurityGroup
        - GroupId
      DBInstanceIdentifier:
        Fn::Join:
        - "-"
        - - Ref: AWS::StackName
          - SourceSQLServer
      LicenseModel: license-included
      Engine: sqlserver-se
      EngineVersion: 15.00.4073.23.v1
      DBInstanceClass: !Ref RDSInstanceType
      AllocatedStorage: '100'
      Iops: '2000'
      MasterUsername: awssct
      MasterUserPassword: Password1
      PubliclyAccessible: 'false'
      BackupRetentionPeriod: '0'
    DependsOn: RDSSecurityGroup

  IPAddressVM1:
    Type: AWS::EC2::EIP

  IPAssocVM1:
    Type: AWS::EC2::EIPAssociation
    Properties:
      InstanceId: !Ref RedisEC2VM1
      EIP: !Ref IPAddressVM1

  RedisEC2VM1:
    Type:  AWS::EC2::Instance
    DependsOn:
      - Subnet2
      - IPAddressVM1
    Properties:
      ImageId:
        Fn::FindInMap:
        - RegionMap
        - !Ref AWS::Region
        - REDISEC2AMI
      InstanceType: !Ref RedisEC2InstType
      SubnetId: !Ref Subnet2
      KeyName: !Ref KeyName
      SecurityGroupIds:
        - Ref: InstanceSecurityGroup
      Tags:
        - Key: 'Name'
          Value: !Join ['',  [!Ref AWS::StackName, 'VM1'] ]
      UserData:
        Fn::Base64:
          !Sub |
             #!/bin/bash -xe
             sudo  bash -l
             yum -y install git wget bind-utils
             /opt/redislabs/bin/rladmin cluster create name ${RedisNSRecord} persistent_path /var/opt/redislabs/persist  ephemeral_path /var/opt/redislabs/tmp  addr $(hostname -i) username ${ClusterUserName} password ${ClusterPassword} external_addr $(dig +short myip.opendns.com @resolver1.opendns.com) register_dns_suffix
             cd /home/ec2-user
             mkdir rlec
             cd rlec
             wget https://s3.amazonaws.com/redis-enterprise-software-downloads/6.2.8/redislabs-6.2.8-53-rhel7-x86_64.tar
             tar xvf redislabs-6.2.8-53-rhel7-x86_64.tar
             ./install.sh -y --allow-same-version

  IPAddressVM2:
    Condition: Do-Two
    Type: AWS::EC2::EIP

  IPAssocVM2:
    Condition: Do-Two
    Type: AWS::EC2::EIPAssociation
    Properties:
      InstanceId: !Ref RedisEC2VM2
      EIP: !Ref IPAddressVM2

  RedisEC2VM2:
    Type:  AWS::EC2::Instance
    Condition: Do-Two
    DependsOn:
      - Subnet3
      - RedisEC2VM1
      - IPAddressVM2
    Properties:
      ImageId:
        Fn::FindInMap:
        - RegionMap
        - !Ref AWS::Region
        - REDISEC2AMI
      InstanceType: !Ref RedisEC2InstType
      SubnetId: !Ref Subnet3
      KeyName: !Ref KeyName
      SecurityGroupIds:
        - Ref: InstanceSecurityGroup
      Tags:
        - Key: 'Name'
          Value: !Join ['',  [!Ref AWS::StackName, 'VM2'] ]
      UserData:
        Fn::Base64:
          !Sub |
              #!/bin/bash -xe
              sudo  bash -l
              yum -y install bind-utils git wget
              cd /home/ec2-user
              mkdir rlec
              cd rlec
              wget https://s3.amazonaws.com/redis-enterprise-software-downloads/6.2.8/redislabs-6.2.8-53-rhel7-x86_64.tar
              tar xvf redislabs-6.2.8-53-rhel7-x86_64.tar
              /opt/redislabs/bin/rl_uninstall.sh
              ./install.sh -y --allow-same-version
              sudo  bash -l
              /opt/redislabs/bin/rladmin cluster join nodes ${RedisEC2VM1.PrivateIp} persistent_path /var/opt/redislabs/persist  ephemeral_path /var/opt/redislabs/tmp  addr $(hostname -i) username ${ClusterUserName} password ${ClusterPassword} external_addr $(dig +short myip.opendns.com @resolver1.opendns.com)

  IPAddressVM3:
    Condition: Create-Three
    Type: AWS::EC2::EIP

  IPAssocVM3:
    Condition: Create-Three
    Type: AWS::EC2::EIPAssociation
    Properties:
      InstanceId: !Ref RedisEC2VM3
      EIP: !Ref IPAddressVM3

  RedisEC2VM3:
    Condition: Create-Three
    Type:  AWS::EC2::Instance
    DependsOn:
      - RedisEC2VM1
      - IPAddressVM3
    Properties:
      ImageId:
        Fn::FindInMap:
        - RegionMap
        - !Ref AWS::Region
        - REDISEC2AMI
      InstanceType: !Ref RedisEC2InstType
      SubnetId: !Ref Subnet1
      KeyName: !Ref KeyName
      SecurityGroupIds:
        - Ref: InstanceSecurityGroup
      Tags:
        - Key: 'Name'
          Value: !Join ['',  [!Ref AWS::StackName, 'VM3'] ]
      UserData:
        Fn::Base64:
          !Sub |
              #!/bin/bash -xe
              sudo  bash -l
              yum -y install bind-utils git wget
              cd /home/ec2-user
              mkdir rlec
              cd rlec
              wget https://s3.amazonaws.com/redis-enterprise-software-downloads/6.2.8/redislabs-6.2.8-53-rhel7-x86_64.tar
              tar xvf redislabs-6.2.8-53-rhel7-x86_64.tar
              /opt/redislabs/bin/rl_uninstall.sh
              ./install.sh -y --allow-same-version
              sudo  bash -l
              /opt/redislabs/bin/rladmin cluster join nodes ${RedisEC2VM1.PrivateIp} persistent_path /var/opt/redislabs/persist  ephemeral_path /var/opt/redislabs/tmp  addr $(hostname -i) username ${ClusterUserName} password ${ClusterPassword} external_addr $(dig +short myip.opendns.com @resolver1.opendns.com)

  RedisARecord1:
    Type: AWS::Route53::RecordSet
    DependsOn:
      - IPAddressVM1
    Properties:
      HostedZoneId: !Ref HostedZoneId
      Comment: DNS name for my instance
      Name: !Join ['',  ['node1.', !Ref ClusterName, ., !Ref HostedZoneName ] ]
      Type: A
      TTL: 900
      ResourceRecords:
        - !Ref IPAddressVM1


  RedisARecord2:
    Condition: Do-Two
    Type: AWS::Route53::RecordSet
    DependsOn:
      - IPAddressVM2
    Properties:
      HostedZoneId: !Ref HostedZoneId
      Comment: DNS name for my instance
      Name: !Join ['',  ['node2.', !Ref ClusterName, ., !Ref HostedZoneName ] ]
      Type: A
      TTL: 900
      ResourceRecords:
        - !Ref IPAddressVM2

  RedisARecord3:
    Condition: Create-Three
    Type: AWS::Route53::RecordSet
    DependsOn:
      - RedisEC2VM3
    Properties:
      HostedZoneId: !Ref HostedZoneId
      Comment: DNS name for my instance
      Name: !Join ['',  ['node3.', !Ref ClusterName, ., !Ref HostedZoneName ] ]
      Type: A
      TTL: 900
      ResourceRecords:
        - !Ref IPAddressVM3

  RedisNSRecord:
    Type: AWS::Route53::RecordSet
    Properties:
      HostedZoneId: !Ref HostedZoneId
      Name: !Join ['', [ !Ref ClusterName, ., !Ref HostedZoneName ] ]
      Type: NS
      TTL: '900'
      ResourceRecords:
        - !Join ['', [ 'node1.', !Ref ClusterName, ., !Ref HostedZoneName ] ]
        - !Join ['', [ 'node2.', !Ref ClusterName, ., !Ref HostedZoneName ] ]
        - !Join ['', [ 'node3.', !Ref ClusterName, ., !Ref HostedZoneName ] ]


Outputs:
  SourceEC2PublicDNS:
    Description: Public DNS enpoint for the EC2 instance
    Value:
      Fn::GetAtt:
      - EC2Instance
      - PublicDnsName
  SourceEC2PrivateDNS:
    Description: Private DNS endpoint for the EC2 instance
    Value:
      Fn::GetAtt:
      - EC2Instance
      - PrivateDnsName
  SourceOracleEndpoint:
    Condition: Oracle
    Description: Source Oracle RDS Endpoint
    Value:
      Fn::GetAtt:
      - SourceOracleDB
      - Endpoint.Address
  TargetAuroraPostgreSQLEndpoint:
    Condition: Oracle
    Description: Target Aurora (PostgreSQL) Database Endpoint
    Value:
      Fn::GetAtt:
      - AuroraPostgresqlCluster
      - Endpoint.Address
  TargetAuroraMySQLEndpoint:
    Condition: AuroraMySQL
    Description: Target Aurora (MySQL) Database Endpoint
    Value:
      Fn::GetAtt:
      - AuroraMySQLInstance
      - Endpoint.Address
  SourceSQLServerEndpoint:
    Condition: SQLServer
    Description: Target MS SQL Server RDS Endpoint
    Value:
      Fn::GetAtt:
      - SourceSQLServer
      - Endpoint.Address
  RedisInstancePrivateDNS:
    Description: 'Private DNS for Redis EC2 instance'
    Value: !GetAtt RedisEC2VM1.PrivateDnsName

  RedisInstancePublicDNS:
    Description: 'Public DNS for Redis EC2 instance'
    Value: !GetAtt RedisEC2VM1.PublicDnsName

  RedisInstancePrivateIP:
    Description: 'Private IP for Redis EC2 instance'
    Value: !GetAtt RedisEC2VM1.PrivateIp

  RedisInstancePublicIP:
    Description: 'Public IP for Redis EC2 instance'
    Value: !GetAtt RedisEC2VM1.PublicIp

  RedisNSRecord:
    Description: 'The NS Record Name for Redis'
    Value: !Ref RedisNSRecord

  RedisARecord1:
    Description: 'The A Record Name for Redis'
    Value: !Ref RedisARecord1

  RedisPort:
    Description: 'The Port used for Redis Database'
    Value: !Ref RedisDatabasePort

