# AWS Database Migration Workshop
# Last Updated on May 20, 2021 by hoomanh@

AWSTemplateFormatVersion: '2010-09-09'
Description: CloudFormation Template for AWS Database Migration Workshop.

Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      -
        Label:
          default: "Database Migration Workshop Lab Environment"
        Parameters:
          - LabType
      -
        Label:
          default: "Amazon EC2 Configuration"
        Parameters:
          - EC2ServerInstanceType
          - KeyName
      -
        Label:
          default: "Target Amazon RDS Database Configuration"
        Parameters:
          - RDSInstanceType
      -
        Label:
          default: "Network Configuration"
        Parameters:
          - VpcCIDR

Mappings:
  RegionMap: # 20 Regions
    us-east-1: # Virginia
      "EC2AMI" : "ami-08e4e35cccc6189f4"  # Updated Feb 3, 2020
      "OracleSnapshotId" : "arn:aws:rds:us-east-1:833997227572:snapshot:dms-lab-oracle-source-snapshot01"
    us-east-2: # Ohio
      "EC2AMI" : "ami-001089eb624938d9f" # Updated Feb 3, 2020
      "OracleSnapshotId" : "arn:aws:rds:us-east-2:833997227572:snapshot:dms-lab-oracle-source-us-east-2-snapshot01"
    us-west-2: # Oregon
      "EC2AMI" : "ami-066333d9c572b0680" # Updated Feb 3, 2020
      "OracleSnapshotId" : "arn:aws:rds:us-west-2:833997227572:snapshot:dms-lab-oracle-source-us-west-2-snapshot01"
    af-south-1: # Cape Town [NO AMD]
      "OracleSnapshotId" : "arn:aws:rds:af-south-1:833997227572:snapshot:dms-lab-oracle-source-snapshot01"
    ap-east-1: # Hong Kong [NO AMD]
      "OracleSnapshotId" : "arn:aws:rds:ap-east-1:833997227572:snapshot:dms-lab-oracle-source-snapshot01"
    ap-south-1: # Mumbai
      "EC2AMI" : "ami-0af25d0df86db00c1" # Updated Feb 3, 2020
      "OracleSnapshotId" : "arn:aws:rds:ap-south-1:833997227572:snapshot:dms-lab-oracle-source-ap-south-1-snapshot01"
    ap-northeast-3: # Osaka [NO AMD]
      "OracleSnapshotId" : "arn:aws:rds:ap-northeast-3:833997227572:snapshot:dms-lab-oracle-source-snapshot01"
    ap-northeast-2: # Seoul
      "EC2AMI" : "ami-0b1d3b1941f23c7d5" # Updated Feb 3, 2020
      "OracleSnapshotId" : "arn:aws:rds:ap-northeast-2:833997227572:snapshot:dms-lab-oracle-source-ap-northeast-2-snapshot01"
    ap-southeast-1: # Singapore
      "EC2AMI" : "ami-0356b1cd4aa0ee970" # Updated Feb 3, 2020
      "OracleSnapshotId" : "arn:aws:rds:ap-southeast-1:833997227572:snapshot:dms-lab-oracle-source-ap-southeast-1-snapshot01"
    ap-southeast-2: # Sydney
      "EC2AMI" : "ami-01dc883c13e87eeda" # Updated Feb 3, 2020
      "OracleSnapshotId" : "arn:aws:rds:ap-southeast-2:833997227572:snapshot:dms-lab-oracle-source-ap-southeast-2-snapshot01"
    ap-northeast-1: # Tokyo
      "EC2AMI" : "ami-032d6db78f84e8bf5" # Updated Feb 3, 2020
      "OracleSnapshotId" : "arn:aws:rds:ap-northeast-1:833997227572:snapshot:dms-lab-oracle-source-ap-northeast-1-snapshot01"
    ca-central-1: # Canada
      "OracleSnapshotId" : "arn:aws:rds:ca-central-1:833997227572:snapshot:dms-lab-oracle-source-ca-central-1-snapshot01"
    eu-central-1: # Frankfurt
      "EC2AMI" : "ami-05cafdf7c9f772ad2" # Updated Feb 3, 2020
      "OracleSnapshotId" : "arn:aws:rds:eu-central-1:833997227572:snapshot:dms-lab-oracle-source-eu-central-1-snapshot01"
    eu-west-1: # Ireland
      "EC2AMI" : "ami-01efa4023f0f3a042" # Updated Feb 3, 2020
      "OracleSnapshotId" : "arn:aws:rds:eu-west-1:833997227572:snapshot:dms-lab-oracle-source-eu-west-1-snapshot01"
    eu-west-2: # London
      "EC2AMI" : "ami-0fdbd8587b1cf431e" # Updated Feb 3, 2020
      "OracleSnapshotId" : "arn:aws:rds:eu-west-2:833997227572:snapshot:dms-lab-oracle-source-snapshot"
    eu-south-1: # Milan
      "EC2AMI" : "ami-0237a7d686bc096c4" # Updated Feb 3, 2020
      "OracleSnapshotId" : "arn:aws:rds:eu-south-1:833997227572:snapshot:dms-lab-oracle-source-snapshot01"
    eu-west-3: # Paris
      "EC2AMI" : "ami-031eb8d942193d84f" # Updated Feb 3, 2020
      "OracleSnapshotId" : "arn:aws:rds:eu-west-3:833997227572:snapshot:dms-lab-oracle-source-snapshot"
    eu-north-1: # Stockholm [NO AMD]
      "EC2AMI" : "ami-067a92fcca2611950" # Updated Feb 3, 2020
      "OracleSnapshotId" : "arn:aws:rds:eu-north-1:833997227572:snapshot:dms-lab-oracle-source-snapshot"
    me-south-1: # Bahrain [NO AMD]
      "OracleSnapshotId" : "arn:aws:rds:me-south-1:833997227572:snapshot:dms-lab-oracle-source-snapshot01"
    sa-east-1: # Sao Paulo
      "EC2AMI" : "ami-06078a297452ba5aa" # Updated Feb 3, 2020
      "OracleSnapshotId" : "arn:aws:rds:sa-east-1:833997227572:snapshot:dms-lab-oracle-source-snapshot"

Parameters:
  RedisDatabasePort:
    Description: Specify database port used for Redis
    Type: String
  ClusterName:
    Description: Prefix Name of the Redis Cluster
    Type: String
  HostedZoneName:
    Description: Hosted Zone Name to use.  This with the prefix cluster name is redis cluster name
    Type: String
  HostedZoneId:
    Description: HostedZoneNames can be duplicate so use Zone Id
    Type: String
  ClusterUserName:
    Description: cluster username email address
    Type: String
  ClusterPassword:
    Description: cluster password
    Type: String
  ClusterURL:
    Description: cluster URL
    Type: String
  LocalIp:
    Description: local IP address used for security group ssh port opening
    Type: String
  NumberInstances:
    Description: Number of Redis EC2 instances for this region
    Type: Number
    MinValue: 1
    MaxValue: 3
    Default: 3
  RedisEC2InstType:
    Description: Amazon EC2 Instance Type  m4 and m5.xlarge 4-16 m5 has better network, 2xlarge 8-13,  r4.xlarge 4 30.5, 8 61
    Type: String
    Default: r4.2xlarge
    AllowedValues:
      - r4.xlarge
      - r4.2xlarge
      - r4.4xlarge
      - r4.8xlarge
      - r4.16xlarge
      - m4.xlarge
      - m4.2xlarge
      - m4.4xlarge
      - m4.10xlarge
      - m4.16xlarge
      - c5a.xlarge
      - c5a.2xlarge
      - c5a.4xlarge
      - c5a.8xlarge
      - c5a.16xlarge
      - i3.large
      - i3.xlarge
      - i3.2xlarge
      - i3.4xlarge
      - i3.8xlarge
      - i3.16xlarge
    ConstraintDescription: Must be a valid EC2 instance type.
  LabType:
    Description: 'Select your source database for the migration'
    Type: String
    AllowedValues:
      - 'MicrosoftSQLServer'
      - 'AmazonAuroraMySQL'
      - 'AmazonAuroraPostgreSQL'
      - 'AmazonRDSMySQL'
      - 'AmazonRDSPostgresSQL'
      - 'Oracle'
    ConstraintDescription: Must select a lab environment from the options.
  ReplicationInstanceType:
    Default: dms.t3.large
    AllowedValues:
      - dms.t2.micro
      - dms.t2.small
      - dms.t2.medium
      - dms.t3.large
      - dms.t2.large
      - dms.c5.large
      - dms.c5.xlarge
      - dms.c5.2xlarge
      - dms.c5.4xlarge
    Description: The instance type to use for the replication instance.
    Type: String
  KeyName:
    Description: Name of an existing EC2 KeyPair to enable RDP access to the instance
    Type: AWS::EC2::KeyPair::KeyName
    ConstraintDescription: must be the name of an existing EC2 KeyPair.
  VpcCIDR:
    Description: Enter the VPC CIDR range in the form x.x.x.x/16.
    Type: String
    MinLength: 9
    MaxLength: 18
    AllowedPattern: "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})"
    ConstraintDescription: Must be a valid CIDR range in the form x.x.x.x/16.
    Default: 10.20.0.0/16
  EC2ServerInstanceType:
    Description: Amazon EC2 Instance Type
    Type: String
    Default: m5.xlarge
    AllowedValues:
      - m5.large
      - m5.xlarge
      - m5.2xlarge
      - m5.4xlarge
      - m5a.large
      - m5a.xlarge
      - m5a.2xlarge
      - m5a.4xlarge
    ConstraintDescription: Must be a valid EC2 instance type.
  RDSInstanceType:
    Description: Amazon RDS Aurora Instance Type
    Type: String
    Default: db.r5.xlarge
    AllowedValues:
      - db.r5.large
      - db.r5.xlarge
      - db.r5.2xlarge
      - db.r5.4xlarge
    ConstraintDescription: Must be a valid Amazon RDS instance type.

  CreateDMSComponents:
    Description: If true, create the DMS instance, DMS endpoints, and the DMS task
    Type: String
    Default: true
    AllowedValues:
      - true
      - false
    ConstraintDescription: Parameter to flip to create the DMS components 
  CreateDMSVPCRole:
    Description: If true, create the DMS VPC role
    Type: String
    Default: false
    AllowedValues:
      - true
      - false
    ConstraintDescription: Parameter to flip to create the DMS VPC Role 
  CreateRedis:
    Description: If true, create Redis cluster
    Type: String
    Default: true
    AllowedValues:
      - true
      - false
    ConstraintDescription: Parameter to set to create the Redis Cluster and Route 53 entries
  RedisPassword:
    Description: Redis AUTH password for the database
    Type: String
  

Conditions:
  Create-DMS-VPC-Role: !Equals [ !Ref CreateDMSVPCRole, true ]
  Create-Redis: !Equals [ !Ref CreateRedis, true ]
  SQLServer: !Equals [ !Ref LabType, 'MicrosoftSQLServer' ]
  AuroraMySQL:      !Equals [ !Ref LabType, 'AmazonAuroraMySQL' ]
  AuroraPostgreSQL: !Equals [ !Ref LabType, 'AmazonAuroraPostgreSQL' ]
  RDSMySQL:         !Equals [ !Ref LabType, 'AmazonRDSMySQL' ]
  RDSPostgreSQL:      !Equals [ !Ref LabType, 'AmazonRDSPostgreSQL' ]
  Oracle:           !Equals [ !Ref LabType, 'Oracle'] 
  Create-One: !Equals [ !Ref NumberInstances, 1 ]
  Create-Two: !Equals [ !Ref NumberInstances, 2 ]
  Create-Three: !Equals [ !Ref NumberInstances, 3 ]
  Do-Two: !Or
    - !Condition Create-Two
    - !Condition Create-Three
  Create-DMS-Environment: !Equals [ !Ref CreateDMSComponents, true ]
  Create-Redis: !Equals [ !Ref CreateRedis, true ]

Resources:
  OnlyRedis:
    Type: 'AWS::CloudFormation::Stack'
    Condition: Create-Redis
    DependsOn:
      - Subnet1
      - Subnet2
      - Subnet3
      - InstanceSecurityGroup
    Properties:
      TemplateURL: OnlyRedis.yaml
      TimeoutInMinutes: 20
      Parameters:
        Subnet1d: !Ref Subnet1 
        Subnet2d: !Ref Subnet2 
        Subnet3d: !Ref Subnet3 
        InstanceSecurityGroup: !Ref InstanceSecurityGroup
        ClusterName: !Ref ClusterName
        ClusterURL: !Ref ClusterURL
        HostedZoneName: !Ref HostedZoneName
        HostedZoneId: !Ref HostedZoneId
        ClusterUserName: !Ref ClusterUserName
        ClusterPassword: !Ref ClusterPassword
        NumberInstances: !Ref NumberInstances
        RedisEC2InstType: !Ref RedisEC2InstType
        KeyName: !Ref KeyName
        RedisDatabasePort: !Ref RedisDatabasePort
        RedisPassword: !Ref RedisPassword

  DmsVpc:
    Type: AWS::EC2::VPC
    Properties:
      EnableDnsSupport: 'true'
      EnableDnsHostnames: 'true'
      CidrBlock:
        Ref: VpcCIDR
      Tags:
      - Key: Name
        Value:
          Fn::Join:
          - "-"
          - - Ref: AWS::StackName
            - DmsVpc
  Subnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref DmsVpc
      CidrBlock: !Select [ 0, !Cidr [ !GetAtt DmsVpc.CidrBlock, 3, 8 ]]
      AvailabilityZone: !Select [0, !GetAZs ]
      Tags:
      - Key: Name
        Value:
          Fn::Join:
          - "-"
          - - Ref: AWS::StackName
            - Subnet1
  Subnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref DmsVpc
      CidrBlock: !Select [ 1, !Cidr [ !GetAtt DmsVpc.CidrBlock, 3, 8 ]]
      AvailabilityZone: !Select [1, !GetAZs ]
      Tags:
      - Key: Name
        Value:
          Fn::Join:
          - "-"
          - - Ref: AWS::StackName
            - Subnet2
  Subnet3:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref DmsVpc
      CidrBlock: !Select [ 2, !Cidr [ !GetAtt DmsVpc.CidrBlock, 3, 8 ]]
      AvailabilityZone: !Select [2, !GetAZs ]
      Tags:
      - Key: Name
        Value:
          Fn::Join:
          - "-"
          - - Ref: AWS::StackName
            - Subnet3
  DBSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupDescription: Subnets available for the DMS Lab
      SubnetIds:
      - Ref: Subnet1
      - Ref: Subnet2
      - Ref: Subnet3
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
      - Key: Name
        Value:
          Fn::Join:
          - "-"
          - - Ref: AWS::StackName
            - InternetGateway
  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref DmsVpc
      InternetGatewayId: !Ref InternetGateway
  RouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref DmsVpc
      Tags:
      - Key: Name
        Value:
          Fn::Join:
          - "-"
          - - Ref: AWS::StackName
            - RouteTable
  Route:
    Type: AWS::EC2::Route
    DependsOn: AttachGateway
    Properties:
      RouteTableId: !Ref RouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway
  Subnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref Subnet1
      RouteTableId: !Ref RouteTable
  Subnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref Subnet2
      RouteTableId: !Ref RouteTable
  Subnet3RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref Subnet3
      RouteTableId: !Ref RouteTable
  EC2Instance:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: !Ref EC2ServerInstanceType
      KeyName: !Ref KeyName
      Tags:
      - Key: Name
        Value:
          Fn::Join:
          - "-"
          - - Ref: AWS::StackName
            - EC2Instance
      ImageId:
        Fn::FindInMap:
        - RegionMap
        - !Ref AWS::Region
        - EC2AMI
      NetworkInterfaces:
      - AssociatePublicIpAddress: 'true'
        DeleteOnTermination: 'true'
        DeviceIndex: 0
        SubnetId: !Ref Subnet2
        GroupSet:
        - Ref: InstanceSecurityGroup
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          sudo yum update -y
          sudo yum install python3 -y
          sudo yum install java-1.8.0-openjdk-devel -y
          sudo yum erase awscli -y
          sudo yum install mysql -y
          sudo yum install postgresql -y
          sudo yum install git maven -y
          cd /home/ec2-user
          echo "export PATH=.local/bin:$PATH" >> .bash_profile
          cd /home/ec2-user
          wget https://bootstrap.pypa.io/get-pip.py
          su -c "python3 get-pip.py --user" -s /bin/sh ec2-user
          su -c "/home/ec2-user/.local/bin/pip3 install boto3 --user" -s /bin/sh ec2-user
          su -c "/home/ec2-user/.local/bin/pip3 install awscli --user" -s /bin/sh ec2-user
          wget https://downloads.mysql.com/docs/world_x-db.tar.gz
          wget https://downloads.mysql.com/docs/sakila-db.tar.gz
          wget https://downloads.mysql.com/docs/menagerie-db.tar.gz
          git clone https://github.com/datacharmer/test_db.git
          tar -xvzf menagerie-db.tar.gz
          tar -xvzf sakila-db.tar.gz
          tar -xvzf world_x-db.tar.gz
          echo "[client]" > .my.cnf
          echo "user=dbmaster" >> .my.cnf
          echo "password=dbmaster123" >> .my.cnf
          echo "mysql < sakila-db/sakila-schema.sql" > testDB.sh
          echo "mysql <  sakila-db/sakila-data.sql" >> testDB.sh
          echo "mysql <  world_x-db/world_x.sql" >> testDB.sh
          echo "cd test_db" >> testDB.sh
          echo "mysql < employees.sql" >> testDB.sh
          echo "cd ../menagerie-db" >> testDB.sh
          echo "mysql < menagerie.sql" >> testDB.sh
          echo "call mysql.rds_set_configuration('binlog retention hours', 24)"
          chmod 755 testDB.sh
          echo "create database menagerie;" > menagerie-db/menagerie.sql
          echo "use menagerie;" >> menagerie-db/menagerie.sql
          echo "SOURCE cr_pet_tbl.sql;" >> menagerie-db/menagerie.sql
          echo "LOAD DATA LOCAL INFILE 'pet.txt' INTO TABLE pet;" >> menagerie-db/menagerie.sql
          echo "SOURCE ins_puff_rec.sql;" >> menagerie-db/menagerie.sql
          echo "SOURCE cr_event_tbl.sql;" >> menagerie-db/menagerie.sql
          echo "LOAD DATA LOCAL INFILE 'event.txt' INTO TABLE pet;" >> menagerie-db/menagerie.sql
          yum -y install autoconf automake make gcc-c++
          yum -y install pcre-devel zlib-devel libmemcached-devel libevent-devel openssl-devel
          git clone git://github.com/RedisLabs/memtier_benchmark.git
          cd memtier_benchmark
          autoreconf -ivf
          ./configure
          make
          make install
          cd /home/ec2-user
          chown -R ec2-user:ec2-user memtier_benchmark
          git clone https://github.com/jphaugla/awsMySQLtoRedisEnterpriseDMS.git
          chown -R ec2-user:ec2-user *

  InstanceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      Tags:
      - Key: Name
        Value:
          Fn::Join:
          - "-"
          - - Ref: AWS::StackName
            - InstanceSecurityGroup
      GroupDescription: Enable RDP access via port 3389
      VpcId: !Ref DmsVpc
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: '3389'
        ToPort: '3389'
        CidrIp: 0.0.0.0/0
        Description: Allows RDP access to EC2 Instance
      - IpProtocol: tcp
        FromPort: '1521'
        ToPort: '1521'
        CidrIp: !Ref VpcCIDR
        Description: Allows Amazon RDS Oracle Access
      - IpProtocol: tcp
        FromPort: '5432'
        ToPort: '5432'
        CidrIp: !Ref VpcCIDR
        Description: Allows Amazon RDS Aurora (PostgreSQL) Access
      - IpProtocol: tcp
        FromPort: '1433'
        ToPort: '1433'
        CidrIp: !Ref VpcCIDR
        Description: Allows SQL Server Access
      - IpProtocol: tcp
        FromPort: '3306'
        ToPort: '3306'
        CidrIp: !Ref VpcCIDR
        Description: Allows Amazon RDS Aurora (MySQL) Access
      - IpProtocol: "tcp"
        CidrIp: !Join ['', [!Ref LocalIp, "/32"] ]
        FromPort: 22
        ToPort: 22
      - IpProtocol: "tcp"
        CidrIp: "0.0.0.0/0"
        FromPort: 9443
        ToPort: 9443
      - IpProtocol: "tcp"
        CidrIp: "0.0.0.0/0"
        FromPort: 8080
        ToPort: 8080
      - IpProtocol: "tcp"
        CidrIp: "0.0.0.0/0"
        FromPort: 8443
        ToPort: 8443
      - IpProtocol: "tcp"
        CidrIp: "0.0.0.0/0"
        FromPort: 12000
        ToPort: 12000
      - IpProtocol: "udp"
        CidrIp: "0.0.0.0/0"
        FromPort: 5353
        ToPort: 5353
      - IpProtocol: "tcp"
        CidrIp: "0.0.0.0/0"
        FromPort: 5353
        ToPort: 5353
      - IpProtocol: "udp"
        CidrIp: "0.0.0.0/0"
        FromPort: 53
        ToPort: 53
      - IpProtocol: "tcp"
        CidrIp: "0.0.0.0/0"
        FromPort: 53
        ToPort: 53

  InstanceGroupInternalIngress:
    Type: 'AWS::EC2::SecurityGroupIngress'
    Properties:
      IpProtocol: -1
      SourceSecurityGroupId: !GetAtt InstanceSecurityGroup.GroupId
      GroupId: !GetAtt InstanceSecurityGroup.GroupId

  SourceOracleDB:
    Condition: Oracle
    Type: AWS::RDS::DBInstance
    DeletionPolicy: Delete
    Properties:
      Tags:
      - Key: Name
        Value:
          Fn::Join:
          - "-"
          - - Ref: AWS::StackName
            - SourceOracleDB
      DBName: 'OracleDB'
      AllocatedStorage: '100'
      StorageType: gp2
      MasterUsername: 'dbmaster'
      MasterUserPassword: 'dbmaster123'
      DBInstanceClass: !Ref RDSInstanceType
      Engine: oracle-ee
      EngineVersion: '12.1.0.2.v6'
      LicenseModel: bring-your-own-license
      PubliclyAccessible: false
      AvailabilityZone:
        Fn::GetAtt:
          - Subnet2
          - AvailabilityZone
      MultiAZ: false
      DBSubnetGroupName:
        Ref: DBSubnetGroup
      VPCSecurityGroups:
        - Fn::GetAtt:
          - OracleSourceSecurityGroup
          - GroupId
      DBSnapshotIdentifier:
        Fn::FindInMap:
          - RegionMap
          - !Ref AWS::Region
          - OracleSnapshotId
      DBInstanceIdentifier:
        Fn::Join:
        - "-"
        - - Ref: AWS::StackName
          - SourceOracleDB
  OracleSourceSecurityGroup:
    Condition: Oracle
    Type: AWS::EC2::SecurityGroup
    Properties:
      Tags:
      - Key: Name
        Value:
          Fn::Join:
          - "-"
          - - Ref: AWS::StackName
            - OracleSourceSecurityGroup
      GroupDescription: Security group for Source Oracle Instance.
      VpcId: !Ref DmsVpc
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: '1521'
        ToPort: '1521'
        CidrIp: !Ref VpcCIDR
        Description: Allows Amazon RDS Oracle Access
  RDSSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      Tags:
      - Key: Name
        Value:
          Fn::Join:
          - "-"
          - - Ref: AWS::StackName
            - RDSSecurityGroup
      VpcId: !Ref DmsVpc
      GroupDescription: Amazon Aurora RDS Security Group.
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: '5432'
        ToPort: '5432'
        CidrIp: !Ref VpcCIDR
        Description: Allows Amazon RDS Aurora (PostgreSQL) Access
      - IpProtocol: tcp
        FromPort: '3306'
        ToPort: '3306'
        CidrIp: !Ref VpcCIDR
        Description: Allows Amazon RDS Aurora (MySQL) Access
      - IpProtocol: tcp
        FromPort: '1433'
        ToPort: '1433'
        CidrIp: !Ref VpcCIDR
        Description: Allows Microsoft SQL Server Access
      - IpProtocol: tcp
        FromPort: '1521'
        ToPort: '1521'
        CidrIp: !Ref VpcCIDR
        Description: Allows Oracle Access
  AuroraPostgresqlCluster:
    Condition: AuroraPostgreSQL
    Type: AWS::RDS::DBCluster
    DeletionPolicy: Delete
    Properties:
      Tags:
      - Key: Name
        Value:
          Fn::Join:
          - "-"
          - - Ref: AWS::StackName
            - AuroraPostgresqlCluster
      DBSubnetGroupName:
        Ref: DBSubnetGroup
      VpcSecurityGroupIds:
      - Fn::GetAtt:
        - RDSSecurityGroup
        - GroupId
      DatabaseName: 'MasterDB'
      Engine: aurora-postgresql
      EngineVersion: '12.4'
      DBClusterParameterGroupName: default.aurora-postgresql12
      MasterUsername: 'dbmaster'
      MasterUserPassword: 'dbmaster123'
      Port: '5432'
      BackupRetentionPeriod: '1'
    DependsOn: RDSSecurityGroup
  AuroraPostgresqlInstance:
    Condition: AuroraPostgreSQL
    Type: AWS::RDS::DBInstance
    DeletionPolicy: Delete
    Properties:
      Tags:
      - Key: Name
        Value:
          Fn::Join:
          - "-"
          - - Ref: AWS::StackName
            - AuroraPostgresqlInstance
      DBClusterIdentifier:
        Ref: AuroraPostgresqlCluster
      DBInstanceIdentifier:
        Fn::Join:
        - "-"
        - - Ref: AWS::StackName
          - AuroraPostgreSQLInstance
      Engine: aurora-postgresql
      EngineVersion: '12.4'
      DBParameterGroupName: default.aurora-postgresql12
      DBClusterIdentifier:
        Ref: AuroraPostgresqlCluster
      DBSubnetGroupName:
        Ref: DBSubnetGroup
      AutoMinorVersionUpgrade: 'true'
      CopyTagsToSnapshot: 'true'
      DBInstanceClass: !Ref RDSInstanceType
      PubliclyAccessible: 'false'
  AuroraMySQLCluster:
    Condition: AuroraMySQL
    Type: AWS::RDS::DBCluster
    DeletionPolicy: Delete
    Properties:
      Tags:
      - Key: Name
        Value:
          Fn::Join:
          - "-"
          - - Ref: AWS::StackName
            - AuroraMySQLCluster
      DBSubnetGroupName:
        Ref: DBSubnetGroup
      VpcSecurityGroupIds:
      - Fn::GetAtt:
        - RDSSecurityGroup
        - GroupId
      DatabaseName: 'MasterDB'
      Engine: aurora-mysql
      EngineVersion: 5.7.mysql_aurora.2.07.4
      MasterUsername: dbmaster
      MasterUserPassword: dbmaster123
    DependsOn: RDSSecurityGroup
  AuroraMySQLInstance:
    Condition: AuroraMySQL
    Type: AWS::RDS::DBInstance
    DeletionPolicy: Delete
    Properties:
      Tags:
      - Key: Name
        Value:
          Fn::Join:
          - "-"
          - - Ref: AWS::StackName
            - AuroraMySQLInstance
      DBClusterIdentifier:
        Ref: AuroraMySQLCluster
      DBInstanceIdentifier:
        Fn::Join:
        - "-"
        - - Ref: AWS::StackName
          - AuroraMySQLInstance
      DBSubnetGroupName:
        Ref: DBSubnetGroup
      DBInstanceClass: !Ref RDSInstanceType
      Engine: aurora-mysql
      EngineVersion: 5.7.mysql_aurora.2.07.4
      LicenseModel: general-public-license
      PubliclyAccessible: 'false'

  RDSPostGresql:
    Condition: RDSPostgreSQL
    Type: AWS::RDS::DBInstance
    Properties:
      AllocatedStorage: '5'
      AllowMajorVersionUpgrade: 'true'
      DBInstanceClass: !Ref RDSInstanceType
      Engine: postgres
      DBName: MasterDB
      VPCSecurityGroups:
      - Fn::GetAtt:
        - RDSSecurityGroup
        - GroupId
      DBSubnetGroupName:
        Ref: DBSubnetGroup
      DBInstanceIdentifier:
        Fn::Join:
        - "-"
        - - Ref: AWS::StackName
          - RDSPostGresql
      EngineVersion: '12.5'
      MasterUsername: 'dbmaster'
      MasterUserPassword: 'dbmaster123'
    DeletionPolicy: Snapshot
    DependsOn:
      - RDSSecurityGroup
      - DBSubnetGroup

  RDSMySQLParameterGroup:
    Type: AWS::RDS::DBParameterGroup
    Properties:
      Tags:
      - Key: Name
        Value:
          Fn::Join:
          - "-"
          - - Ref: AWS::StackName
            - RDSMySQLParameterGroup
      Description: RDS MySQL DBParameterGroup
      Family: mysql8.0
      Parameters:
        binlog_format: 'ROW'

  RDSMySQLDBS:
    Condition: RDSMySQL
    Type: AWS::RDS::DBInstance
    Properties:
      AllocatedStorage: '5'
      AllowMajorVersionUpgrade: 'true'
      DBInstanceClass: !Ref RDSInstanceType
      Engine: mysql 
      DBName: MasterDB
      VPCSecurityGroups:
      - Fn::GetAtt:
        - RDSSecurityGroup
        - GroupId
      DBParameterGroupName:
        Ref: RDSMySQLParameterGroup
      DBSubnetGroupName:
        Ref: DBSubnetGroup
      DBInstanceIdentifier:
        Fn::Join:
        - "-"
        - - Ref: AWS::StackName
          - RDSMySQLDBS
      EngineVersion: '8.0.27'
      MasterUsername: 'dbmaster'
      MasterUserPassword: 'dbmaster123'
    DeletionPolicy: Snapshot
    DependsOn:
      - RDSSecurityGroup
      - DBSubnetGroup
      - RDSMySQLParameterGroup

  SourceSQLServer:
    Condition: SQLServer
    Type: AWS::RDS::DBInstance
    DeletionPolicy: Delete
    Properties:
      Tags:
      - Key: Name
        Value:
          Fn::Join:
          - "-"
          - - Ref: AWS::StackName
            - AuroraMySQLInstance
      DBSubnetGroupName:
        Ref: DBSubnetGroup
      VPCSecurityGroups:
      - Fn::GetAtt:
        - RDSSecurityGroup
        - GroupId
      DBInstanceIdentifier:
        Fn::Join:
        - "-"
        - - Ref: AWS::StackName
          - SourceSQLServer
      LicenseModel: license-included
      Engine: sqlserver-se
      EngineVersion: 15.00.4073.23.v1
      DBInstanceClass: !Ref RDSInstanceType
      AllocatedStorage: '100'
      Iops: '2000'
      MasterUsername: awssct
      MasterUserPassword: Password1
      PubliclyAccessible: 'false'
      BackupRetentionPeriod: '0'
    DependsOn: RDSSecurityGroup


  DMSCloudwatchRole:
    Condition: Create-DMS-Environment
    Type: 'AWS::IAM::Role'
    Properties:
      RoleName: dms-cloudwatch-logs-role-maria
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - dms.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/service-role/AmazonDMSCloudWatchLogsRole'
      Path: /

  DMSVpcRole:
    Condition: Create-DMS-Environment
    Condition: Create-DMS-VPC-Role
    Type: 'AWS::IAM::Role'
    Properties:
      RoleName: dms-vpc-role
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - dms.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/service-role/AmazonDMSVPCManagementRole'
      Path: /


  DMSReplicationSubnetGroup:
    Condition: Create-DMS-Environment
    Type: 'AWS::DMS::ReplicationSubnetGroup'
    Properties:
      ReplicationSubnetGroupDescription: 'DMS replication subnet'
      SubnetIds:
      - Ref: Subnet1
      - Ref: Subnet2
      - Ref: Subnet3
    DependsOn:
      - Subnet1
      - Subnet2
      - Subnet3

  DMSReplicationInstance:
    Condition: Create-DMS-Environment
    Type: 'AWS::DMS::ReplicationInstance'
    DependsOn:
      - DMSCloudwatchRole
      - DMSReplicationSubnetGroup
    Properties:
      AllocatedStorage: 100
      AllowMajorVersionUpgrade: true
      AutoMinorVersionUpgrade: true
      EngineVersion: 3.4.6
      MultiAZ: false
      PubliclyAccessible: false
      ReplicationInstanceClass: !Ref ReplicationInstanceType
      ReplicationSubnetGroupIdentifier: !Ref DMSReplicationSubnetGroup
      VpcSecurityGroupIds:
      - Fn::GetAtt:
        - InstanceSecurityGroup
        - GroupId


  DMSAuroraPGEndpoint:
    Condition: Create-DMS-Environment
    Condition: AuroraPostgreSQL
    Type: 'AWS::DMS::Endpoint'
    Properties:
      EngineName: aurora-postgresql
      EndpointType: source
      Username: 'dbmaster'
      Password: 'dbmaster123'
      ServerName: !GetAtt
        - AuroraPostgresqlCluster
        - Endpoint.Address
      Port: 5432
      DatabaseName: 'MasterDB'
    DependsOn:
      - AuroraPostgresqlCluster

  DMSRDSPGEndpoint:
    Condition: Create-DMS-Environment
    Condition: RDSPostgreSQL
    Type: 'AWS::DMS::Endpoint'
    Properties:
      EngineName: postgres
      EndpointType: source
      Username: 'dbmaster'
      Password: 'dbmaster123'
      ServerName: !GetAtt
        - RDSPostGresql
        - Endpoint.Address
      Port: 5432
      DatabaseName: 'MasterDB'
    DependsOn:
      - RDSPostGresql


  DMSAuroraMySQLEndpoint:
    Condition: Create-DMS-Environment
    Condition: AuroraPostgreSQL
    Type: 'AWS::DMS::Endpoint'
    Properties:
      EngineName: aurora-mysql
      EndpointType: source
      Username: 'dbmaster'
      Password: 'dbmaster123'
      ServerName: !GetAtt
        - AuroraMySQLCluster
        - Endpoint.Address
      Port: 1433
      DatabaseName: 'MasterDB'
    DependsOn:
      - AuroraMySQLCluster

  DMSRDSMySQLEndpoint:
    Condition: Create-DMS-Environment
    Condition: RDSMySQL
    Type: 'AWS::DMS::Endpoint'
    Properties:
      EngineName: mysql
      EndpointType: source
      Username: 'dbmaster'
      Password: 'dbmaster123'
      ServerName: !GetAtt
        - RDSMySQLDBS
        - Endpoint.Address
      Port: 3306
      DatabaseName: 'MasterDB'
    DependsOn:
      - RDSMySQLDBS


Outputs:
  SourceEC2PublicDNS:
    Description: Public DNS enpoint for the EC2 instance
    Value:
      Fn::GetAtt:
      - EC2Instance
      - PublicDnsName
  SourceEC2PrivateDNS:
    Description: Private DNS endpoint for the EC2 instance
    Value:
      Fn::GetAtt:
      - EC2Instance
      - PrivateDnsName
  SourceOracleEndpoint:
    Condition: Oracle
    Description: Source Oracle RDS Endpoint
    Value:
      Fn::GetAtt:
      - SourceOracleDB
      - Endpoint.Address
  TargetAuroraPostgreSQLEndpoint:
    Condition: Oracle
    Description: Target Aurora (PostgreSQL) Database Endpoint
    Value:
      Fn::GetAtt:
      - AuroraPostgresqlCluster
      - Endpoint.Address
  TargetRDSMySQLEndpoint:
    Condition: RDSMySQL
    Description: Target RDS (MySQL) Database Endpoint
    Value:
      Fn::GetAtt:
      - RDSMySQLDBS 
      - Endpoint.Address
  TargetAuroraMySQLEndpoint:
    Condition: AuroraMySQL
    Description: Target Aurora (MySQL) Database Endpoint
    Value:
      Fn::GetAtt:
      - AuroraMySQLInstance
      - Endpoint.Address
  SourceSQLServerEndpoint:
    Condition: SQLServer
    Description: Target MS SQL Server RDS Endpoint
    Value:
      Fn::GetAtt:
      - SourceSQLServer
      - Endpoint.Address
